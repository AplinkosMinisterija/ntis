export const MULTI_TAB_KEY = 'multitab';
export const SESSION_KEY = 'session';
export const TERMS_KEY = 'terms';
export const SES_VALUE_TRUE = 'T';
export const SES_VALUE_FALSE = 'F';
export class AuthUtil {
    static copyFromSessionStorageToLocalStorage(keys) {
        keys.forEach((key) => {
            const value = sessionStorage.getItem(key);
            if (value !== null) {
                localStorage.setItem(key, value);
            }
        });
    }
    static setMultiTabSession(multiTabSession) {
        if (multiTabSession) {
            if (localStorage.getItem(MULTI_TAB_KEY) !== SES_VALUE_TRUE) {
                localStorage.setItem(MULTI_TAB_KEY, SES_VALUE_TRUE);
                this.copyFromSessionStorageToLocalStorage([SESSION_KEY, TERMS_KEY]);
            }
        }
        else {
            localStorage.setItem(MULTI_TAB_KEY, SES_VALUE_FALSE);
            localStorage.removeItem(SESSION_KEY);
            localStorage.removeItem(TERMS_KEY);
        }
    }
    static isMultiTabSession() {
        return localStorage.getItem(MULTI_TAB_KEY) === SES_VALUE_TRUE;
    }
    static clearSessionStorage() {
        if (AuthUtil.isMultiTabSession()) {
            localStorage.removeItem(SESSION_KEY);
            localStorage.removeItem(TERMS_KEY);
        }
        sessionStorage.clear();
    }
    static getJWTFromSession() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.token : null;
    }
    static getSessionInfo() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session : null;
    }
    static updateSessionInfo(session) {
        const loginResult = AuthUtil.getLoginResult();
        loginResult.session = session;
        if (AuthUtil.isMultiTabSession()) {
            localStorage.setItem(SESSION_KEY, JSON.stringify(loginResult));
        }
        else {
            sessionStorage.setItem(SESSION_KEY, JSON.stringify(loginResult));
        }
    }
    static getLoginResult() {
        const sessionData = AuthUtil.isMultiTabSession()
            ? localStorage.getItem(SESSION_KEY)
            : sessionStorage.getItem(SESSION_KEY);
        return sessionData ? JSON.parse(sessionData) : null;
    }
    static setLoginResult(loginResult) {
        if (AuthUtil.isMultiTabSession()) {
            localStorage.setItem(SESSION_KEY, JSON.stringify(loginResult));
        }
        else {
            sessionStorage.setItem(SESSION_KEY, JSON.stringify(loginResult));
        }
    }
    static isLoggedIn() {
        return this.getLoginResult() != null;
    }
    static isTermsAccepted() {
        const termsOfUse = JSON.parse(AuthUtil.isMultiTabSession() ? localStorage.getItem(TERMS_KEY) : sessionStorage.getItem(TERMS_KEY));
        return termsOfUse && (termsOfUse.code === 'Y' || termsOfUse.code === SES_VALUE_TRUE);
    }
    static setTermsAccepted(accept) {
        const terms = {
            code: accept ? SES_VALUE_TRUE : SES_VALUE_FALSE,
            key_value: null,
            display_text: null,
        };
        const termsString = JSON.stringify(terms);
        if (AuthUtil.isMultiTabSession()) {
            localStorage.setItem(TERMS_KEY, termsString);
        }
        else {
            sessionStorage.setItem(TERMS_KEY, termsString);
        }
    }
    static getRoleCode() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session.roleCode : null;
    }
    static getRoleId() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session.roleId : null;
    }
    static getRoleName() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session.roleName : null;
    }
    static getOrgId() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session.orgId : null;
    }
    static getOrgName() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session.orgName : null;
    }
    static getLanguage() {
        const loginResult = AuthUtil.getLoginResult();
        return loginResult ? loginResult.session.language : null;
    }
}
//# sourceMappingURL=data:application/json;base64,