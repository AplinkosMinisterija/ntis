import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
class AppMessages {
    ngZone;
    static SEVERITY_ERROR = 'error';
    static SEVERITY_WARN = 'warn';
    static SEVERITY_SUCCESS = 'success';
    static SEVERITY_INFO = 'info';
    add$ = new Subject();
    clear$ = new Subject();
    messages = [];
    constructor(ngZone) {
        this.ngZone = ngZone;
    }
    showMessage(message) {
        if (message.id === 'VALIDATION' ||
            message.severity === AppMessages.SEVERITY_ERROR ||
            message.severity === AppMessages.SEVERITY_WARN) {
            message.sticky = true;
        }
        this.ngZone.run(() => {
            if (this.messages.some((messageFromArray) => messageFromArray.severity === message.severity && messageFromArray.detail === message.detail)) {
                this.clearMessages();
                this.messages.push(message);
                this.add$.next(message);
            }
            else if (message.data?.allowMultiple ||
                !this.messages.some((messageFromArray) => messageFromArray.severity === message.severity && messageFromArray.detail === message.detail)) {
                this.messages.push(message);
                this.add$.next(message);
            }
        });
    }
    clearMessages() {
        this.clear$.next();
        this.messages = [];
    }
    clearMessagesExceptSuccess() {
        if (this.messages.some((message) => message.severity !== AppMessages.SEVERITY_SUCCESS)) {
            this.clear$.next();
            this.messages = [];
        }
    }
    removeMessage(message) {
        const messageIndex = this.messages.findIndex((messageFromArray) => messageFromArray.severity === message.severity && messageFromArray.detail === message.detail);
        if (messageIndex !== -1) {
            this.messages.splice(messageIndex, 1);
        }
    }
    showError(summary, detail, id) {
        this.showMessage({ severity: AppMessages.SEVERITY_ERROR, detail, id });
    }
    showWarning(summary, detail, id) {
        this.showMessage({ severity: AppMessages.SEVERITY_WARN, detail, id });
    }
    showSuccess(summary, detail, id) {
        this.showMessage({ severity: AppMessages.SEVERITY_SUCCESS, detail, id });
    }
    showInfo(summary, detail, id) {
        this.showMessage({ severity: AppMessages.SEVERITY_INFO, detail, id });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AppMessages, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AppMessages, providedIn: 'root' });
}
export { AppMessages };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AppMessages, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLm1lc3NhZ2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXMyLWNvbW1vbnMvc3JjL2xpYi9tZXNzYWdlL2FwcC5tZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBVS9CLE1BR2EsV0FBVztJQVdGO0lBVmIsTUFBTSxDQUFVLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFDekMsTUFBTSxDQUFVLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDdkMsTUFBTSxDQUFVLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztJQUM3QyxNQUFNLENBQVUsYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUU5QixJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQWMsQ0FBQztJQUNqQyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUVyQyxRQUFRLEdBQWlCLEVBQUUsQ0FBQztJQUVwQyxZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFOUIsV0FBVyxDQUFDLE9BQW1CO1FBQ3JDLElBQ0UsT0FBTyxDQUFDLEVBQUUsS0FBSyxZQUFZO1lBQzNCLE9BQU8sQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFDLGNBQWM7WUFDL0MsT0FBTyxDQUFDLFFBQVEsS0FBSyxXQUFXLENBQUMsYUFBYSxFQUM5QztZQUNBLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ25CLElBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUNuQixnQkFBZ0IsQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLE1BQU0sQ0FDL0YsRUFDRDtnQkFDQSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN6QjtpQkFBTSxJQUNKLE9BQU8sQ0FBQyxJQUFnQyxFQUFFLGFBQWE7Z0JBQ3hELENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2pCLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUNuQixnQkFBZ0IsQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLE1BQU0sQ0FDL0YsRUFDRDtnQkFDQSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDekI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsMEJBQTBCO1FBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDdEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsT0FBbUI7UUFDL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQzFDLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsUUFBUSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsTUFBTSxDQUNuSCxDQUFDO1FBQ0YsSUFBSSxZQUFZLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBQyxPQUFlLEVBQUUsTUFBYyxFQUFFLEVBQVc7UUFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxFQUFXO1FBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQWUsRUFBRSxNQUFjLEVBQUUsRUFBVztRQUN0RCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQWUsRUFBRSxNQUFjLEVBQUUsRUFBVztRQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQzt1R0EvRVUsV0FBVzsyR0FBWCxXQUFXLGNBRlYsTUFBTTs7U0FFUCxXQUFXOzJGQUFYLFdBQVc7a0JBSHZCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwTWVzc2FnZSB7XHJcbiAgc2V2ZXJpdHk/OiBzdHJpbmc7XHJcbiAgZGV0YWlsPzogc3RyaW5nO1xyXG4gIGlkPzogdW5rbm93bjtcclxuICBzdGlja3k/OiBib29sZWFuO1xyXG4gIGRhdGE/OiB1bmtub3duO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXBwTWVzc2FnZXMge1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU0VWRVJJVFlfRVJST1IgPSAnZXJyb3InO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU0VWRVJJVFlfV0FSTiA9ICd3YXJuJztcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFNFVkVSSVRZX1NVQ0NFU1MgPSAnc3VjY2Vzcyc7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBTRVZFUklUWV9JTkZPID0gJ2luZm8nO1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYWRkJCA9IG5ldyBTdWJqZWN0PEFwcE1lc3NhZ2U+KCk7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNsZWFyJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gIHByaXZhdGUgbWVzc2FnZXM6IEFwcE1lc3NhZ2VbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lKSB7fVxyXG5cclxuICBwcml2YXRlIHNob3dNZXNzYWdlKG1lc3NhZ2U6IEFwcE1lc3NhZ2UpOiB2b2lkIHtcclxuICAgIGlmIChcclxuICAgICAgbWVzc2FnZS5pZCA9PT0gJ1ZBTElEQVRJT04nIHx8XHJcbiAgICAgIG1lc3NhZ2Uuc2V2ZXJpdHkgPT09IEFwcE1lc3NhZ2VzLlNFVkVSSVRZX0VSUk9SIHx8XHJcbiAgICAgIG1lc3NhZ2Uuc2V2ZXJpdHkgPT09IEFwcE1lc3NhZ2VzLlNFVkVSSVRZX1dBUk5cclxuICAgICkge1xyXG4gICAgICBtZXNzYWdlLnN0aWNreSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5zb21lKFxyXG4gICAgICAgICAgKG1lc3NhZ2VGcm9tQXJyYXkpID0+XHJcbiAgICAgICAgICAgIG1lc3NhZ2VGcm9tQXJyYXkuc2V2ZXJpdHkgPT09IG1lc3NhZ2Uuc2V2ZXJpdHkgJiYgbWVzc2FnZUZyb21BcnJheS5kZXRhaWwgPT09IG1lc3NhZ2UuZGV0YWlsXHJcbiAgICAgICAgKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmNsZWFyTWVzc2FnZXMoKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5hZGQkLm5leHQobWVzc2FnZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgKG1lc3NhZ2UuZGF0YSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik/LmFsbG93TXVsdGlwbGUgfHxcclxuICAgICAgICAhdGhpcy5tZXNzYWdlcy5zb21lKFxyXG4gICAgICAgICAgKG1lc3NhZ2VGcm9tQXJyYXkpID0+XHJcbiAgICAgICAgICAgIG1lc3NhZ2VGcm9tQXJyYXkuc2V2ZXJpdHkgPT09IG1lc3NhZ2Uuc2V2ZXJpdHkgJiYgbWVzc2FnZUZyb21BcnJheS5kZXRhaWwgPT09IG1lc3NhZ2UuZGV0YWlsXHJcbiAgICAgICAgKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5hZGQkLm5leHQobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJNZXNzYWdlcygpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXIkLm5leHQoKTtcclxuICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcclxuICB9XHJcblxyXG4gIGNsZWFyTWVzc2FnZXNFeGNlcHRTdWNjZXNzKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWVzc2FnZXMuc29tZSgobWVzc2FnZSkgPT4gbWVzc2FnZS5zZXZlcml0eSAhPT0gQXBwTWVzc2FnZXMuU0VWRVJJVFlfU1VDQ0VTUykpIHtcclxuICAgICAgdGhpcy5jbGVhciQubmV4dCgpO1xyXG4gICAgICB0aGlzLm1lc3NhZ2VzID0gW107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVNZXNzYWdlKG1lc3NhZ2U6IEFwcE1lc3NhZ2UpOiB2b2lkIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VJbmRleCA9IHRoaXMubWVzc2FnZXMuZmluZEluZGV4KFxyXG4gICAgICAobWVzc2FnZUZyb21BcnJheSkgPT4gbWVzc2FnZUZyb21BcnJheS5zZXZlcml0eSA9PT0gbWVzc2FnZS5zZXZlcml0eSAmJiBtZXNzYWdlRnJvbUFycmF5LmRldGFpbCA9PT0gbWVzc2FnZS5kZXRhaWxcclxuICAgICk7XHJcbiAgICBpZiAobWVzc2FnZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICB0aGlzLm1lc3NhZ2VzLnNwbGljZShtZXNzYWdlSW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2hvd0Vycm9yKHN1bW1hcnk6IHN0cmluZywgZGV0YWlsOiBzdHJpbmcsIGlkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLnNob3dNZXNzYWdlKHsgc2V2ZXJpdHk6IEFwcE1lc3NhZ2VzLlNFVkVSSVRZX0VSUk9SLCBkZXRhaWwsIGlkIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvd1dhcm5pbmcoc3VtbWFyeTogc3RyaW5nLCBkZXRhaWw6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuc2hvd01lc3NhZ2UoeyBzZXZlcml0eTogQXBwTWVzc2FnZXMuU0VWRVJJVFlfV0FSTiwgZGV0YWlsLCBpZCB9KTtcclxuICB9XHJcblxyXG4gIHNob3dTdWNjZXNzKHN1bW1hcnk6IHN0cmluZywgZGV0YWlsOiBzdHJpbmcsIGlkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLnNob3dNZXNzYWdlKHsgc2V2ZXJpdHk6IEFwcE1lc3NhZ2VzLlNFVkVSSVRZX1NVQ0NFU1MsIGRldGFpbCwgaWQgfSk7XHJcbiAgfVxyXG5cclxuICBzaG93SW5mbyhzdW1tYXJ5OiBzdHJpbmcsIGRldGFpbDogc3RyaW5nLCBpZD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5zaG93TWVzc2FnZSh7IHNldmVyaXR5OiBBcHBNZXNzYWdlcy5TRVZFUklUWV9JTkZPLCBkZXRhaWwsIGlkIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=