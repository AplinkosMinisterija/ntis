import { BaseBrowseForm } from '../form/base.browse.form';
export const SPEC_CHARS = '@./$!%*?&#_-';
export const PWD_PATTERN = '(?=^.{12,}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[-@.$/!%*?&#_.])(?!.*\\s).*$';
export function escapeRegExp(str) {
    return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
}
export function toKeyValues(codes) {
    if (Array.isArray(codes)) {
        return codes.map((code) => ({ code }));
    }
    return [];
}
export function fromKeyValues(keyValues) {
    if (Array.isArray(keyValues)) {
        return keyValues.map((keyValue) => keyValue.code);
    }
    return [];
}
export function convertKeyValues(keyValues) {
    if (Array.isArray(keyValues)) {
        return keyValues.map((keyValue) => ({ value: keyValue.code, label: keyValue.key_value }));
    }
    return [];
}
export function keyValuesToMap(keyValues) {
    const result = new Map();
    keyValues.forEach((keyValue) => {
        result.set(keyValue.code, keyValue.key_value);
    });
    return result;
}
const Y = 'Y';
const N = 'N';
export function toBoolean(value) {
    return value === Y;
}
export function fromBoolean(value) {
    return value ? Y : N;
}
export function toRadioBtnIdVal(values) {
    let result = null;
    if (values) {
        const value = values.find((p) => p.key_value === Y);
        if (value) {
            result = value.id;
        }
    }
    return result;
}
export function fromRadioBtnIdVal(array, id) {
    if (array) {
        array.forEach((p) => {
            p.key_value = p.id === id ? Y : N;
        });
    }
    return array;
}
export function toRadioBtnKeyVal(values) {
    let result = '';
    if (values) {
        const value = values.find((p) => p.key_value === Y);
        if (value) {
            result = value.code;
        }
    }
    return result;
}
export function fromRadioBtnKeyVal(array, code) {
    if (array) {
        array.forEach((p) => {
            p.key_value = p.code === code ? Y : N;
        });
    }
    return array;
}
export function appendPagingParams(url, pagingParams) {
    if (!pagingParams) {
        return url;
    }
    if (!pagingParams.page_size) {
        pagingParams.page_size = BaseBrowseForm.DEFAULT_ROWS_TO_SHOW;
    }
    if (url.substring(url.length - 1) !== '?') {
        url = url + '&';
    }
    url = `${url}page_size=${pagingParams.page_size}&skip_rows=${pagingParams.skip_rows}`;
    if (pagingParams.order_clause) {
        url = url + '&order_clause=' + pagingParams.order_clause;
    }
    return url;
}
export function appendSearchParams(url, params) {
    if (params) {
        params.forEach((value, key) => {
            if (value && value !== '') {
                url = `${url}&${key}=${value}`;
            }
        });
    }
    return url;
}
export const deepEquals = (x, y) => {
    if (x === y) {
        return true; // if both x and y are null or undefined and exactly the same
    }
    else if (!(x instanceof Object) || !(y instanceof Object)) {
        return false; // if they are not strictly equal, they both need to be Objects
    }
    else if (x.constructor !== y.constructor) {
        // they must have the exact same prototype chain, the closest we can do is
        // test their constructor.
        return false;
    }
    else {
        for (const p in x) {
            if (!Object.prototype.hasOwnProperty.call(x, p)) {
                continue; // other properties were tested using x.constructor === y.constructor
            }
            if (!Object.prototype.hasOwnProperty.call(y, p)) {
                return false; // allows to compare x[ p ] and y[ p ] when set to undefined
            }
            if (x[p] === y[p]) {
                continue; // if they have the same strict value or identity then they are equal
            }
            if (typeof x[p] !== 'object') {
                return false; // Numbers, Strings, Functions, Booleans must be strictly equal
            }
            if (!deepEquals(x[p], y[p])) {
                return false;
            }
        }
        for (const p in y) {
            if (Object.prototype.hasOwnProperty.call(y, p) && !Object.prototype.hasOwnProperty.call(x, p)) {
                return false;
            }
        }
        return true;
    }
};
//# sourceMappingURL=data:application/json;base64,