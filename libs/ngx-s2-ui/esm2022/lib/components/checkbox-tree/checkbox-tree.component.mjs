import { Component, ContentChildren, Input, ViewEncapsulation, } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject, takeUntil } from 'rxjs';
import { IconComponent } from '../icon/icon.component';
import { TemplateDirective } from '../../directives/template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../services/s2-ui-translations.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
class CheckboxTreeComponent {
    translationsService;
    static S2_TEMPLATE_ITEM_LABEL = 'item-label';
    static getValues(items, valueProperty, state = 'checked') {
        return items.reduce((accumulator, item) => {
            if (item.children?.length) {
                accumulator.push(...CheckboxTreeComponent.getValues(item.children, valueProperty, state));
            }
            else if (state === 'any' ||
                (state === 'checked' && item.checked === true) ||
                (state === 'uncheked' && !item.checked)) {
                accumulator.push(valueProperty ? item[valueProperty] : item);
            }
            return accumulator;
        }, []);
    }
    destroy$ = new Subject();
    templatesQueryList;
    itemLabelTemplate;
    items;
    showSelectAll = true;
    selectAllText;
    inputsIdPrefix = '';
    valueProperty;
    selectAllChecked = false;
    disabled = false;
    touched = false;
    onChange;
    onTouched;
    constructor(translationsService) {
        this.translationsService = translationsService;
    }
    ngOnChanges(changes) {
        if (changes.items.currentValue) {
            this.refreshCheckedValues();
        }
    }
    ngAfterContentInit() {
        this.updateTemplates();
        this.templatesQueryList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.updateTemplates();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.unsubscribe();
    }
    writeValue(newValue) {
        if (this.onChange) {
            const setValue = (items, value) => {
                items.forEach((item) => {
                    if (item.children?.length) {
                        setValue(item.children, value);
                    }
                    else {
                        item.checked = value?.length
                            ? this.valueProperty
                                ? value.some((valueItem) => valueItem === item[this.valueProperty])
                                : value.includes(item)
                            : false;
                    }
                });
            };
            setValue(this.items, newValue);
            this.refreshCheckedValues();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched?.();
            this.touched = true;
        }
    }
    handleSelectAll(event) {
        this.handleCheckboxChange({ children: this.items, checked: this.selectAllChecked }, event);
    }
    handleCheckboxChange(item, event) {
        if (item.children?.length && event) {
            const eventTarget = event.target;
            this.setChildrenCheckedValue(item, item.checked === 'semi' ? true : eventTarget.checked);
        }
        this.refreshCheckedValues();
        this.markAsTouched();
        this.onChange?.(this.getValues());
    }
    getValues(items = this.items, valueProperty = this.valueProperty, state = 'checked') {
        return CheckboxTreeComponent.getValues(items, valueProperty, state);
    }
    setChildrenCheckedValue(item, value) {
        item.children?.forEach((child) => {
            child.checked = value;
            if (child.children?.length) {
                this.setChildrenCheckedValue(child, value);
            }
        });
    }
    isItemChecked(item) {
        if (item.children?.length) {
            const selectedCount = item.children.reduce((accumulator, child) => {
                if (child.children?.length) {
                    const isChildChildrenSelected = this.isItemChecked(child);
                    child.checked = isChildChildrenSelected;
                    if (isChildChildrenSelected === true) {
                        return accumulator + 1;
                    }
                    else if (isChildChildrenSelected === 'semi') {
                        return accumulator + 0.5;
                    }
                }
                else if (child.checked === true) {
                    return accumulator + 1;
                }
                return accumulator;
            }, 0);
            if (selectedCount === item.children.length && item.children.length > 0) {
                return true;
            }
            else if (selectedCount > 0) {
                return 'semi';
            }
            return false;
        }
        else {
            return item.checked === true;
        }
    }
    refreshCheckedValues() {
        if (this.showSelectAll) {
            this.selectAllChecked = this.isItemChecked({ children: this.items });
        }
        else {
            this.items.forEach((item) => {
                item.checked = this.isItemChecked(item);
            });
        }
    }
    updateTemplates() {
        this.itemLabelTemplate = this.templatesQueryList.find((template) => template.s2Template === CheckboxTreeComponent.S2_TEMPLATE_ITEM_LABEL)?.template;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CheckboxTreeComponent, deps: [{ token: i1.S2UiTranslationsService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: CheckboxTreeComponent, isStandalone: true, selector: "s2-checkbox-tree", inputs: { items: "items", showSelectAll: "showSelectAll", selectAllText: "selectAllText", inputsIdPrefix: "inputsIdPrefix", valueProperty: "valueProperty" }, host: { classAttribute: "s2-checkbox-tree" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: CheckboxTreeComponent,
            },
        ], queries: [{ propertyName: "templatesQueryList", predicate: TemplateDirective }], usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"showSelectAll\" class=\"s2-ui-inline-input-label s2-checkbox-tree-item s2-checkbox-tree-item--select-all\">\r\n  <input\r\n    type=\"checkbox\"\r\n    id=\"select-all\"\r\n    [checked]=\"selectAllChecked\"\r\n    class=\"s2-ui-input-checkbox\"\r\n    [ngClass]=\"{'s2-ui-input-checkbox--semi-selected': selectAllChecked === 'semi'}\"\r\n    (change)=\"handleSelectAll($event)\"\r\n  />\r\n  <label class=\"s2-checkbox-tree-item__label\" for=\"select-all\">\r\n    {{ selectAllText || translationsService.translations.action.selectAll }}\r\n  </label>\r\n</div>\r\n\r\n<ul class=\"s2-checkbox-tree-items\">\r\n  <ng-container *ngTemplateOutlet=\"loop; context: {items: items, idPrefix: inputsIdPrefix}\"></ng-container>\r\n</ul>\r\n\r\n<ng-template #loop let-items=\"items\" let-idPrefix=\"idPrefix\">\r\n  <ng-container *ngFor=\"let item of items; index as i\">\r\n    <li *ngIf=\"!item.hidden\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"item.children?.length ? groupView : checkboxView; context: {item: item, idPrefix: ''+idPrefix+i}\"\r\n      ></ng-container>\r\n    </li>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #groupView let-group=\"item\" let-idPrefix=\"idPrefix\">\r\n  <div class=\"s2-ui-inline-input-label\">\r\n    <div class=\"s2-checkbox-tree-item__button-placeholder\">\r\n      <button type=\"button\" class=\"s2-checkbox-tree-item__chevron-button\" (click)=\"group.open = !group.open\">\r\n        <s2-icon>{{ group.open ? 'expand_more' : 'chevron_right'}} </s2-icon>\r\n      </button>\r\n    </div>\r\n    <input\r\n      type=\"checkbox\"\r\n      [id]=\"idPrefix + '-' + (group.key !== undefined ? group.key : group.label)\"\r\n      class=\"s2-ui-input-checkbox\"\r\n      [checked]=\"group.checked\"\r\n      [disabled]=\"disabled || group.disabled\"\r\n      [ngClass]=\"{'s2-ui-input-checkbox--semi-selected': group.checked === 'semi'}\"\r\n      (change)=\"handleCheckboxChange(group, $event)\"\r\n    />\r\n    <label\r\n      class=\"s2-checkbox-tree-item__label\"\r\n      [for]=\"idPrefix + '-' + (group.key !== undefined ? group.key : group.label)\"\r\n    >\r\n      <ng-container *ngIf=\"itemLabelTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"itemLabelTemplate; context: {$implicit: group}\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!itemLabelTemplate\">\r\n        {{ group.label }}\r\n      </ng-container>\r\n    </label>\r\n  </div>\r\n  <ul *ngIf=\"group.open\">\r\n    <ng-container *ngTemplateOutlet=\"loop; context: {items: group.children, idPrefix: idPrefix}\"></ng-container>\r\n  </ul>\r\n</ng-template>\r\n\r\n<ng-template #checkboxView let-checkbox=\"item\" let-idPrefix=\"idPrefix\">\r\n  <div class=\"s2-ui-inline-input-label\">\r\n    <div class=\"s2-checkbox-tree-item__button-placeholder\"></div>\r\n    <input\r\n      type=\"checkbox\"\r\n      [id]=\"idPrefix + '-' + (checkbox.key !== undefined ? checkbox.key : checkbox.label)\"\r\n      class=\"s2-ui-input-checkbox\"\r\n      [disabled]=\"disabled || checkbox.disabled\"\r\n      [(ngModel)]=\"checkbox.checked\"\r\n      (ngModelChange)=\"handleCheckboxChange(checkbox, null)\"\r\n    />\r\n    <label\r\n      class=\"s2-checkbox-tree-item__label\"\r\n      [for]=\"idPrefix + '-' + (checkbox.key !== undefined ? checkbox.key : checkbox.label)\"\r\n    >\r\n      <ng-container *ngIf=\"itemLabelTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"itemLabelTemplate; context: {$implicit: checkbox}\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!itemLabelTemplate\">\r\n        {{ checkbox.label }}\r\n      </ng-container>\r\n    </label>\r\n  </div>\r\n</ng-template>\r\n", styles: [".s2-checkbox-tree{display:block}.s2-checkbox-tree-items li{margin-top:.125rem;margin-bottom:.125rem}.s2-checkbox-tree-items li li{margin-left:1.5rem}.s2-checkbox-tree-item__button-placeholder{min-width:1.25rem}.s2-checkbox-tree-item__chevron-button{display:flex;align-items:center;justify-content:center;font-size:var(--s2-font-size-xl);line-height:var(--s2-font-size-xl-line-height)}.s2-checkbox-tree-item__label{padding-top:1px;font-size:var(--s2-font-size-sm);line-height:var(--s2-font-size-sm-line-height)}.s2-checkbox-tree-item--select-all{padding-bottom:.125rem}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: IconComponent, selector: "s2-icon" }], encapsulation: i0.ViewEncapsulation.None });
}
export { CheckboxTreeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CheckboxTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 's2-checkbox-tree', standalone: true, imports: [CommonModule, FormsModule, IconComponent], encapsulation: ViewEncapsulation.None, host: { class: 's2-checkbox-tree' }, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: CheckboxTreeComponent,
                        },
                    ], template: "<div *ngIf=\"showSelectAll\" class=\"s2-ui-inline-input-label s2-checkbox-tree-item s2-checkbox-tree-item--select-all\">\r\n  <input\r\n    type=\"checkbox\"\r\n    id=\"select-all\"\r\n    [checked]=\"selectAllChecked\"\r\n    class=\"s2-ui-input-checkbox\"\r\n    [ngClass]=\"{'s2-ui-input-checkbox--semi-selected': selectAllChecked === 'semi'}\"\r\n    (change)=\"handleSelectAll($event)\"\r\n  />\r\n  <label class=\"s2-checkbox-tree-item__label\" for=\"select-all\">\r\n    {{ selectAllText || translationsService.translations.action.selectAll }}\r\n  </label>\r\n</div>\r\n\r\n<ul class=\"s2-checkbox-tree-items\">\r\n  <ng-container *ngTemplateOutlet=\"loop; context: {items: items, idPrefix: inputsIdPrefix}\"></ng-container>\r\n</ul>\r\n\r\n<ng-template #loop let-items=\"items\" let-idPrefix=\"idPrefix\">\r\n  <ng-container *ngFor=\"let item of items; index as i\">\r\n    <li *ngIf=\"!item.hidden\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"item.children?.length ? groupView : checkboxView; context: {item: item, idPrefix: ''+idPrefix+i}\"\r\n      ></ng-container>\r\n    </li>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #groupView let-group=\"item\" let-idPrefix=\"idPrefix\">\r\n  <div class=\"s2-ui-inline-input-label\">\r\n    <div class=\"s2-checkbox-tree-item__button-placeholder\">\r\n      <button type=\"button\" class=\"s2-checkbox-tree-item__chevron-button\" (click)=\"group.open = !group.open\">\r\n        <s2-icon>{{ group.open ? 'expand_more' : 'chevron_right'}} </s2-icon>\r\n      </button>\r\n    </div>\r\n    <input\r\n      type=\"checkbox\"\r\n      [id]=\"idPrefix + '-' + (group.key !== undefined ? group.key : group.label)\"\r\n      class=\"s2-ui-input-checkbox\"\r\n      [checked]=\"group.checked\"\r\n      [disabled]=\"disabled || group.disabled\"\r\n      [ngClass]=\"{'s2-ui-input-checkbox--semi-selected': group.checked === 'semi'}\"\r\n      (change)=\"handleCheckboxChange(group, $event)\"\r\n    />\r\n    <label\r\n      class=\"s2-checkbox-tree-item__label\"\r\n      [for]=\"idPrefix + '-' + (group.key !== undefined ? group.key : group.label)\"\r\n    >\r\n      <ng-container *ngIf=\"itemLabelTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"itemLabelTemplate; context: {$implicit: group}\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!itemLabelTemplate\">\r\n        {{ group.label }}\r\n      </ng-container>\r\n    </label>\r\n  </div>\r\n  <ul *ngIf=\"group.open\">\r\n    <ng-container *ngTemplateOutlet=\"loop; context: {items: group.children, idPrefix: idPrefix}\"></ng-container>\r\n  </ul>\r\n</ng-template>\r\n\r\n<ng-template #checkboxView let-checkbox=\"item\" let-idPrefix=\"idPrefix\">\r\n  <div class=\"s2-ui-inline-input-label\">\r\n    <div class=\"s2-checkbox-tree-item__button-placeholder\"></div>\r\n    <input\r\n      type=\"checkbox\"\r\n      [id]=\"idPrefix + '-' + (checkbox.key !== undefined ? checkbox.key : checkbox.label)\"\r\n      class=\"s2-ui-input-checkbox\"\r\n      [disabled]=\"disabled || checkbox.disabled\"\r\n      [(ngModel)]=\"checkbox.checked\"\r\n      (ngModelChange)=\"handleCheckboxChange(checkbox, null)\"\r\n    />\r\n    <label\r\n      class=\"s2-checkbox-tree-item__label\"\r\n      [for]=\"idPrefix + '-' + (checkbox.key !== undefined ? checkbox.key : checkbox.label)\"\r\n    >\r\n      <ng-container *ngIf=\"itemLabelTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"itemLabelTemplate; context: {$implicit: checkbox}\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!itemLabelTemplate\">\r\n        {{ checkbox.label }}\r\n      </ng-container>\r\n    </label>\r\n  </div>\r\n</ng-template>\r\n", styles: [".s2-checkbox-tree{display:block}.s2-checkbox-tree-items li{margin-top:.125rem;margin-bottom:.125rem}.s2-checkbox-tree-items li li{margin-left:1.5rem}.s2-checkbox-tree-item__button-placeholder{min-width:1.25rem}.s2-checkbox-tree-item__chevron-button{display:flex;align-items:center;justify-content:center;font-size:var(--s2-font-size-xl);line-height:var(--s2-font-size-xl-line-height)}.s2-checkbox-tree-item__label{padding-top:1px;font-size:var(--s2-font-size-sm);line-height:var(--s2-font-size-sm-line-height)}.s2-checkbox-tree-item--select-all{padding-bottom:.125rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.S2UiTranslationsService }]; }, propDecorators: { templatesQueryList: [{
                type: ContentChildren,
                args: [TemplateDirective]
            }], items: [{
                type: Input
            }], showSelectAll: [{
                type: Input
            }], selectAllText: [{
                type: Input
            }], inputsIdPrefix: [{
                type: Input
            }], valueProperty: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,